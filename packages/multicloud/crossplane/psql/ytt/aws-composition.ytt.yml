#@ load("@ytt:data", "data")
---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: #@ data.values.providers.aws.name + "-" + data.values.cloudServiceBindingType
  labels:
    crossplane.io/xrd: #@ data.values.xrd.names.plural + "." + data.values.xrd.group
    provider: #@ data.values.providers.aws.name
    database: #@ data.values.cloudServiceBindingType
spec:
  writeConnectionSecretsToNamespace: #@ data.values.crossplane.namespace
  compositeTypeRef:
    apiVersion: #@ data.values.xrd.group + "/" + data.values.xrd.version
    kind: #@ data.values.xrd.names.kind
  resources:
  - name: tf-providerconfig
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: tf.upbound.io/v1beta1
            kind: ProviderConfig
            spec:
              credentials: []
              #@yaml/text-templated-strings
              configuration: |
                terraform {
                  required_providers {
                    random = {
                      source = "hashicorp/random"
                      version = "3.4.3"
                    }
                  }
            
                  backend "kubernetes" {
                    secret_suffix     = "providerconfig-default"
                    namespace         = "(@= data.values.crossplane.namespace @)"
                    in_cluster_config = true
                  }
                }
                provider "random" {}
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.uid
      toFieldPath: spec.forProvider.manifest.metadata.name
  - name: password
    base:
      apiVersion: tf.upbound.io/v1beta1
      kind: Workspace
      spec:
        forProvider:
          module: |
            resource "random_password" "password" {
              length  = 64
              special = false
            }

            output "password" {
              value     = random_password.password.result
              sensitive = true
            }
          source: Inline
        writeConnectionSecretToRef:
          namespace: #@ data.values.crossplane.namespace
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.uid
      toFieldPath: spec.writeConnectionSecretToRef.name
      transforms:
        - type: string
          string:
            type: Format
            fmt: '%s-postgresql-admin'
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.uid
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: metadata.labels[crossplane.io/claim-name]
      toFieldPath: spec.writeConnectionSecretToRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
      toFieldPath: spec.writeConnectionSecretToRef.namespace
    - type: ToCompositeFieldPath
      fromFieldPath: metadata.labels[crossplane.io/claim-name]
      toFieldPath: status.binding.name
    connectionDetails:
    - fromConnectionSecretKey: password
  - name: rdsinstance
    base:
      apiVersion: rds.aws.upbound.io/v1beta1
      kind: Instance
      spec:
        forProvider:
          engine: postgres
          instanceClass: db.t3.micro
          passwordSecretRef: #! needs password generated by secret gen as option?!
            key: password
            namespace: #@ data.values.crossplane.namespace
          publiclyAccessible: true #! set this to false for anything other than temporary demos
          skipFinalSnapshot: true
          storageEncrypted: false
          allocatedStorage: 10
          #! storageType: gp2 #! One of "standard" (magnetic), "gp2" (general purpose SSD), or "io1" (provisioned IOPS SSD). The default is "io1" if iops is specified, "gp2" if not.
          #!optionGroupName: abc #! needs reference/api resouce
          #!parameterGroupName: abc #! needs reference/api resouce
          vpcSecurityGroupIdSelector:
            matchControllerRef: true 
          dbSubnetGroupNameSelector:
            matchControllerRef: true 
        providerConfigRef:
          name: #@ data.values.providers.aws.configRef
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.uid
      toFieldPath: spec.forProvider.passwordSecretRef.name
      transforms:
        - type: string
          string:
            type: Format
            fmt: '%s-postgresql-admin'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.version
      toFieldPath: spec.forProvider.engineVersion
      transforms:
      - type: map
        map:
          "11": "11.17"
          "12": "12.12"
          "13": "13.8"
          "14": "14.5"
          "15": "14.5"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.location
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.adminUsername
      toFieldPath: spec.forProvider.username
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.database
      toFieldPath: spec.forProvider.dbName
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.storageClass
      toFieldPath: spec.forProvider.storageType
    #! not allowed when using 11, 12, not sure about others
    #! - type: FromCompositeFieldPath
    #!   fromFieldPath: spec.parameters.charset
    #!   toFieldPath: spec.forProvider.characterSetName
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.collation
      toFieldPath: spec.forProvider.collation
      
    connectionDetails:
    - name: type
      value: postgresql
    - name: provider
      value: aws
    - name: port
      value: "5432"
    - name: database
      fromFieldPath: spec.forProvider.dbName
      type: FromFieldPath
    - name: username
      fromFieldPath: spec.forProvider.username
      type: FromFieldPath
    - name: host
      fromFieldPath: status.atProvider.address
      type: FromFieldPath


  - name: securitygroup
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: SecurityGroup
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: spec.forProvider.name
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: spec.forProvider.description
      transforms:
      - string:
          fmt: 'Traffic to RDS instance %s'
          type: Format
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.vpcId
      toFieldPath: spec.forProvider.vpcId
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.location
      toFieldPath: spec.forProvider.region

  - name: securitygrouprule
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: SecurityGroupRule
      spec:
        forProvider:
          fromPort: 5432
          toPort: 5432
          protocol: tcp
          securityGroupIdSelector:
            matchControllerRef: true
          type: ingress
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.cidrBlocks
      toFieldPath: spec.forProvider.cidrBlocks
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.location
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.labels.port
      toFieldPath: spec.forProvider.fromPort
      transforms:
      - type: convert
        convert:
          toType: int
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.labels.port
      toFieldPath: spec.forProvider.toPort
      transforms:
      - type: convert
        convert:
          toType: int

  - name: subnetgroup
    base: 
      apiVersion: rds.aws.upbound.io/v1beta1
      kind: SubnetGroup
      spec:
        forProvider:
          subnetIdSelector:
            matchControllerRef: true
          tags:
            Name: subnet group for RDS via crossplane
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.uid
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            type: Format
            fmt: 'rds-sg-%s'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.location
      toFieldPath: spec.forProvider.region

  - name: subneta
    base: 
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: Subnet
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.vpcId
      toFieldPath: spec.forProvider.vpcId
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.location
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.subnetACidrBlock
      toFieldPath: spec.forProvider.cidrBlock
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.uid
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            type: Format
            fmt: 'subnet-a-%s'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.location
      toFieldPath: spec.forProvider.availabilityZone
      transforms:
        - type: string
          string:
            type: Format
            fmt: '%sa'
  - name: subnetb
    base: 
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: Subnet
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.vpcId
      toFieldPath: spec.forProvider.vpcId
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.location
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.subnetBCidrBlock
      toFieldPath: spec.forProvider.cidrBlock
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.uid
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            type: Format
            fmt: 'subnet-b-%s'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.location
      toFieldPath: spec.forProvider.availabilityZone
      transforms:
        - type: string
          string:
            type: Format
            fmt: '%sb'
  - name: routetable
    base: 
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: RouteTable
      metadata:
        name: table
      spec:
        forProvider:
          tags:
            Name: RDS-via-Crossplane
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.vpcId
      toFieldPath: spec.forProvider.vpcId
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.location
      toFieldPath: spec.forProvider.region
  - name: routetableassoA
    base: 
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: RouteTableAssociation
      metadata:
        name: rta
      spec:
        forProvider:
          routeTableIdSelector:
            matchControllerRef: true
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.location
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.uid
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            type: Format
            fmt: 'subnet-a-%s'
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.uid
      toFieldPath: spec.forProvider.subnetIdRef.name
      transforms:
        - type: string
          string:
            type: Format
            fmt: 'subnet-a-%s'
  - name: routetableassoB
    base: 
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: RouteTableAssociation
      metadata:
        name: rta
      spec:
        forProvider:
          routeTableIdSelector:
            matchControllerRef: true
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.location
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.uid
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            type: Format
            fmt: 'subnet-b-%s'
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.uid
      toFieldPath: spec.forProvider.subnetIdRef.name
      transforms:
        - type: string
          string:
            type: Format
            fmt: 'subnet-b-%s'
  - name: route
    base: 
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: Route
      metadata:
        name: route
      spec:
        forProvider:
          destinationCidrBlock: 0.0.0.0/0
          routeTableIdSelector:
            matchControllerRef: true
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.location
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.gatewayId
      toFieldPath: spec.forProvider.gatewayId
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.uid
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            type: Format
            fmt: 'route-%s'