apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: azure-postgresql
  labels:
    crossplane.io/xrd: xpostgresqlinstances.multi.ref.services.apps.tanzu.vmware.com
    provider: azure
    database: postgresql
spec:
  writeConnectionSecretsToNamespace: upbound-system
  compositeTypeRef:
    apiVersion: multi.ref.services.apps.tanzu.vmware.com/v1alpha1
    kind: XPostgreSQLInstance
  resources:
  - name: tf-providerconfig
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: tf.crossplane.io/v1alpha1
            kind: ProviderConfig
            spec:
              credentials: []
              configuration: |
                terraform {
                  required_providers {
                    random = {
                      source = "hashicorp/random"
                      version = "3.4.3"
                    }
                  }

                  backend "kubernetes" {
                    secret_suffix     = "providerconfig-default"
                    namespace         = "upbound-system"
                    in_cluster_config = true
                  }
                }
                provider "random" {}
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.uid
      toFieldPath: spec.forProvider.manifest.metadata.name
  - name: password
    base:
      apiVersion: tf.crossplane.io/v1alpha1
      kind: Workspace
      spec:
        forProvider:
          module: |
            resource "random_password" "password" {
              length  = 64
              special = false
            }

            output "password" {
              value     = random_password.password.result
              sensitive = true
            }
          source: Inline
        writeConnectionSecretToRef:
          namespace: upbound-system
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.uid
      toFieldPath: spec.writeConnectionSecretToRef.name
      transforms:
      - type: string
        string:
          type: Format
          fmt: '%s-postgresql-admin'
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.uid
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: metadata.labels[crossplane.io/claim-name]
      toFieldPath: spec.writeConnectionSecretToRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
      toFieldPath: spec.writeConnectionSecretToRef.namespace
    - type: ToCompositeFieldPath
      fromFieldPath: metadata.labels[crossplane.io/claim-name]
      toFieldPath: status.binding.name
    connectionDetails:
    - fromConnectionSecretKey: password
  - name: resourcegroup
    base:
      apiVersion: azure.upbound.io/v1beta1
      kind: ResourceGroup
      spec: {}
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.location
      toFieldPath: spec.forProvider.location
    - type: ToCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: status.resourceGroup
  - name: flexibleserver
    base:
      apiVersion: dbforpostgresql.azure.upbound.io/v1beta1
      kind: FlexibleServer
      spec:
        providerConfigRef:
          name: default
        forProvider:
          resourceGroupNameSelector:
            matchControllerRef: true
          administratorLogin: psqladmin
          skuName: GP_Standard_D4s_v3
          storageMb: 32768
          administratorPasswordSecretRef:
            key: password
            name: ""
            namespace: upbound-system
          location: ""
          version: ""
        writeConnectionSecretToRef:
          namespace: upbound-system
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.location
      toFieldPath: spec.forProvider.location
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.version
      toFieldPath: spec.forProvider.values.image.tag
      transforms:
      - type: map
        map:
          "11": "11"
          "12": "12"
          "13": "13"
          "14": "13"
          "15": "13"
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.uid
      toFieldPath: spec.writeConnectionSecretToRef.name
      transforms:
      - string:
          fmt: '%s-postgresql'
          type: Format
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.uid
      toFieldPath: spec.forProvider.administratorPasswordSecretRef.name
      transforms:
      - string:
          fmt: '%s-postgresql'
          type: Format
        type: string
    connectionDetails:
    - name: type
      value: postgresql
    - name: provider
      value: azure
    - name: database
      value: postgres
    - name: username
      fromFieldPath: spec.forProvider.administratorLogin
    - name: password
      fromConnectionSecretKey: attribute.administrator_password
    - name: host
      fromFieldPath: status.atProvider.fqdn
    - name: port
      type: FromValue
      value: "5432"
  - name: flexibleserverconfig
    base:
      apiVersion: dbforpostgresql.azure.upbound.io/v1beta1
      kind: FlexibleServerConfiguration
      spec:
        providerConfigRef:
          name: default
        forProvider:
          serverIdSelector:
            matchControllerRef: true
          name: backslash_quote
          value: "on"
  - name: flexibleserverdatabase
    base:
      apiVersion: dbforpostgresql.azure.upbound.io/v1beta1
      kind: FlexibleServerDatabase
      spec:
        providerConfigRef:
          name: default
        forProvider:
          serverIdSelector:
            matchControllerRef: true
          charset: ""
          collation: ""
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.charset
      toFieldPath: spec.forProvider.charset
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.collation
      toFieldPath: spec.forProvider.collation
  - name: firewallrule
    base:
      apiVersion: dbforpostgresql.azure.upbound.io/v1beta1
      kind: FlexibleServerFirewallRule
      spec:
        providerConfigRef:
          name: default
        forProvider:
          serverIdSelector:
            matchControllerRef: true
          startIpAddress: ""
          endIpAddress: ""
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.firewallRule.startIpAddress
      toFieldPath: spec.forProvider.startIpAddress
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.firewallRule.endIpAddress
      toFieldPath: spec.forProvider.endIpAddress
---
apiVersion: meta.pkg.crossplane.io/v1
kind: Configuration
metadata:
  name: multicloud-psql
spec:
  dependsOn:
  - provider: xpkg.upbound.io/upbound/provider-azure
    version: '>=v0.18.1'
  - provider: xpkg.upbound.io/crossplane-contrib/provider-helm
    version: '>=v0.12.0'
---
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xpostgresqlinstances.multi.ref.services.apps.tanzu.vmware.com
spec:
  group: multi.ref.services.apps.tanzu.vmware.com
  names:
    kind: XPostgreSQLInstance
    plural: xpostgresqlinstances
  claimNames:
    kind: PostgreSQLInstance
    plural: postgresqlinstances
  connectionSecretKeys:
  - type
  - provider
  - host
  - port
  - database
  - username
  - password
  versions:
  - name: v1alpha1
    served: true
    referenceable: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            properties:
              parameters:
                type: object
                properties:
                  location:
                    type: string
                  version:
                    type: string
                    default: "13"
                    enum:
                    - "11"
                    - "12"
                    - "13"
                  adminUsername:
                    type: string
                    default: postgres
                  storageClass:
                    type: string
                    default: default
                  database:
                    type: string
                    default: postgres
                  collation:
                    type: string
                    default: en_US.utf8
                  charset:
                    type: string
                    default: utf8
                  firewallRule:
                    type: object
                    properties:
                      startIpAddress:
                        type: string
                        default: 0.0.0.0/0
                      endIpAddress:
                        type: string
                        default: 0.0.0.0/0
                required:
                - location
            required:
            - parameters
          status:
            type: object
            properties:
              version:
                type: string
              address:
                type: string
              location:
                type: string
              binding:
                type: object
                properties:
                  name:
                    type: string
    additionalPrinterColumns:
    - name: address
      type: string
      jsonPath: .status.address
    - name: location
      type: string
      jsonPath: .status.location
    - name: version
      type: string
      jsonPath: .status.version
    - name: connection-details
      type: string
      jsonPath: .status.binding.name
---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: helm-postgresql
  labels:
    crossplane.io/xrd: xpostgresqlinstances.multi.ref.services.apps.tanzu.vmware.com
    provider: helm
    database: postgresql
spec:
  writeConnectionSecretsToNamespace: upbound-system
  compositeTypeRef:
    apiVersion: multi.ref.services.apps.tanzu.vmware.com/v1alpha1
    kind: XPostgreSQLInstance
  resources:
  - name: tf-providerconfig
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: tf.crossplane.io/v1alpha1
            kind: ProviderConfig
            spec:
              credentials: []
              configuration: |
                terraform {
                  required_providers {
                    random = {
                      source = "hashicorp/random"
                      version = "3.4.3"
                    }
                  }

                  backend "kubernetes" {
                    secret_suffix     = "providerconfig-default"
                    namespace         = "upbound-system"
                    in_cluster_config = true
                  }
                }

                provider "random" {}
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.uid
      toFieldPath: spec.forProvider.manifest.metadata.name
  - name: password
    base:
      apiVersion: tf.crossplane.io/v1alpha1
      kind: Workspace
      spec:
        forProvider:
          module: |
            resource "random_password" "password" {
              length  = 64
              special = false
            }

            output "password" {
              value     = random_password.password.result
              sensitive = true
            }
          source: Inline
        writeConnectionSecretToRef:
          namespace: upbound-system
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.uid
      toFieldPath: spec.writeConnectionSecretToRef.name
      transforms:
      - type: string
        string:
          type: Format
          fmt: '%s-postgresql-admin'
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.uid
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: metadata.labels[crossplane.io/claim-name]
      toFieldPath: spec.writeConnectionSecretToRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
      toFieldPath: spec.writeConnectionSecretToRef.namespace
    - type: ToCompositeFieldPath
      fromFieldPath: metadata.labels[crossplane.io/claim-name]
      toFieldPath: status.binding.name
    connectionDetails:
    - fromConnectionSecretKey: password
  - name: release
    base:
      apiVersion: helm.crossplane.io/v1beta1
      kind: Release
      spec:
        forProvider:
          namespace: upbound-system
          chart:
            name: postgresql
            repository: https://charts.bitnami.com/bitnami
            version: 12.1.2
          values:
            architecture: standalone
            global:
              postgresql:
                auth:
                  secretKeys:
                    adminPasswordKey: password
    connectionDetails:
    - name: type
      value: postgresql
    - name: provider
      value: helm
    - name: database
      fromFieldPath: spec.forProvider.values.global.postgresql.auth.database
      type: FromFieldPath
    - name: username
      fromFieldPath: spec.forProvider.values.global.postgresql.auth.username
      type: FromFieldPath
    - name: host
      fromFieldPath: metadata.labels.address
      type: FromFieldPath
    - name: port
      value: "5432"
    patches:
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.values.primary.initdb.args
      policy:
        fromFieldPath: Required
      combine:
        strategy: string
        string:
          fmt: -E %s --locale=%s
        variables:
        - fromFieldPath: spec.parameters.charset
        - fromFieldPath: spec.parameters.collation
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.version
      toFieldPath: spec.forProvider.values.image.tag
      transforms:
      - type: map
        map:
          "11": 11.18.0
          "12": 12.13.0
          "13": 13.9.0
          "14": 14.6.0
          "15": 15.1.0
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.uid
      toFieldPath: spec.forProvider.values.global.postgresql.auth.existingSecret
      transforms:
      - type: string
        string:
          type: Format
          fmt: '%s-postgresql-admin'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.adminUsername
      toFieldPath: spec.forProvider.values.global.postgresql.auth.username
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.storageClass
      toFieldPath: spec.forProvider.values.primary.persistence.storageClass
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.database
      toFieldPath: spec.forProvider.values.global.postgresql.auth.database
    - type: FromCompositeFieldPath
      fromFieldPath: status.address
      toFieldPath: metadata.labels.address
    - type: ToCompositeFieldPath
      toFieldPath: status.location
      fromFieldPath: spec.forProvider.namespace
    - type: CombineToComposite
      toFieldPath: status.address
      policy:
        fromFieldPath: Required
      combine:
        strategy: string
        string:
          fmt: '%s.%s.svc.cluster.local'
        variables:
        - fromFieldPath: metadata.name
        - fromFieldPath: spec.forProvider.namespace
    - type: ToCompositeFieldPath
      fromFieldPath: spec.forProvider.values.image.tag
      toFieldPath: status.version
