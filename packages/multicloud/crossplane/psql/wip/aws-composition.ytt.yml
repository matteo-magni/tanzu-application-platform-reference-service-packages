#@ load("@ytt:data", "data")
---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: #@ (data.values.xrd.claimNames.kind).lower()
  labels:
    crossplane.io/xrd: #@ data.values.xrd.names.plural + "." + data.values.xrd.group
    provider: #@ data.values.provider.name
    database: #@ data.values.cloudServiceBindingType
spec:
  publishConnectionDetailsWithStoreConfigRef:
    name: #@ data.values.storeConfig.name
  compositeTypeRef:
    apiVersion: #@ data.values.xrd.group + "/" + data.values.xrd.version
    kind: #@ data.values.xrd.names.kind
  resources:
  - base:
    apiVersion: rds.aws.upbound.io/v1beta1
    kind: Instance
    metadata:
      annotations:
        upjet.upbound.io/manual-intervention: This resource has a password secret reference.
      name: example-dbinstance
    spec:
      forProvider:
        allocatedStorage: 20
        autoMinorVersionUpgrade: true
        backupRetentionPeriod: 14
        backupWindow: 09:46-10:16
        engine: postgres
        engineVersion: "13.7"
        instanceClass: db.t3.micro
        maintenanceWindow: Mon:00:00-Mon:03:00
        name: example
        passwordSecretRef: #! needs password generated by secret gen as option?!
          key: password
          name: example-dbinstance
          namespace: upbound-system
        publiclyAccessible: false
        region: us-west-1
        skipFinalSnapshot: true
        storageEncrypted: false
        storageType: gp2 #! One of "standard" (magnetic), "gp2" (general purpose SSD), or "io1" (provisioned IOPS SSD). The default is "io1" if iops is specified, "gp2" if not.
        username: adminuser
        optionGroupName: abc #! needs reference/api resouce
        parameterGroupName: abc #! needs reference/api resouce
        vpcSecurityGroupIdSelector:  #! needs reference/api resouce
          matchControllerRef: true #! needs reference/api resouce
        dbSubnetGroupNameSelector:
          matchControllerRef: true #! needs reference/api resouce
      providerConfigRef:
        name: #@ data.values.provider.configRef
      writeConnectionSecretToRef:
        namespace: #@ data.values.crossplane.namespace
  #! if specified, else it goes into "default VPC"
  - base:
      apiVersion: rds.aws.upbound.io/v1beta1
      kind: SubnetGroup
      metadata:
        name: example-subnetgroup
      spec:
        forProvider:
          region: us-west-1
          subnetIdRefs:
            - name: sample-db-subnet1
            - name: sample-db-subnet2
          tags:
            Name: My DB subnet group

  #! OLD,  needs to be replaced
  - base:
      apiVersion: database.aws.crossplane.io/v1beta1
      kind: RDSInstance
      spec:
        forProvider:
          dbInstanceClass: db.t2.micro
          engine: postgres
          dbName: postgres
          engineVersion: "12"
          masterUsername: masteruser
          publiclyAccessible: true
          region: us-east-1
          skipFinalSnapshotBeforeDeletion: true
        writeConnectionSecretToRef:
          namespace: #@ data.values.crossplane.namespace
    connectionDetails:
    - name: type
      value: postgresql
    - name: provider
      value: aws
    - name: database
      value: postgres
    - fromConnectionSecretKey: username
    - fromConnectionSecretKey: password
    - name: host
      fromConnectionSecretKey: endpoint
    - fromConnectionSecretKey: port
    name: rdsinstance
    patches:
    - fromFieldPath: metadata.uid
      toFieldPath: spec.writeConnectionSecretToRef.name
      transforms:
      - string:
          fmt: '%s-postgresql'
          type: Format
        type: string
      type: FromCompositeFieldPath
    - fromFieldPath: spec.parameters.storageGB
      toFieldPath: spec.forProvider.allocatedStorage
      type: FromCompositeFieldPath