#@ load("@ytt:data", "data")
---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: #@ data.values.providers.helm.name + "-" + data.values.cloudServiceBindingType
  labels:
    crossplane.io/xrd: #@ data.values.xrd.names.plural + "." + data.values.xrd.group
    provider: #@ data.values.providers.helm.name
    database: #@ data.values.cloudServiceBindingType
spec:
  publishConnectionDetailsWithStoreConfigRef:
    name: #@ data.values.storeConfig.name
  compositeTypeRef:
    apiVersion: #@ data.values.xrd.group + "/" + data.values.xrd.version
    kind: #@ data.values.xrd.names.kind
  resources:

  - name: tf-providerconfig
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: tf.crossplane.io/v1alpha1
            kind: ProviderConfig
            spec:
              credentials: []
              #@yaml/text-templated-strings
              configuration: |
                terraform {
                  required_providers {
                    random = {
                      source = "hashicorp/random"
                      version = "3.4.3"
                    }
                  }
            
                  backend "kubernetes" {
                    secret_suffix     = "providerconfig-default"
                    namespace         = "(@= data.values.crossplane.namespace @)"
                    in_cluster_config = true
                  }
                }

                provider "random" {}

    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.uid
      toFieldPath: spec.forProvider.manifest.metadata.name

  - name: password
    base:
      apiVersion: tf.crossplane.io/v1alpha1
      kind: Workspace
      spec:
        forProvider:
          module: |
            resource "random_password" "password" {
              length  = 64
              special = false
            }

            output "password" {
              value = random_password.password.result
              sensitive = true
            }
          source: Inline
        writeConnectionSecretToRef:
          namespace: #@ data.values.crossplane.namespace

    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.uid
      toFieldPath: spec.writeConnectionSecretToRef.name
      transforms:
        - type: string
          string:
            type: Format
            fmt: '%s-postgresql-admin'
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.uid
      toFieldPath: spec.providerConfigRef.name

    connectionDetails:
    - fromConnectionSecretKey: password

  - name: release
    base:
      apiVersion: helm.crossplane.io/v1beta1
      kind: Release
      spec:
        forProvider:
          namespace: #@ data.values.crossplane.namespace
          chart:
            name: postgresql
            repository: https://charts.bitnami.com/bitnami
            version: 12.1.2
          values:
            architecture: standalone
            primary:
              initdb:
                args: "-E UTF8 --locale=en_US"

    connectionDetails:
    - name: type
      value: postgresql
    - name: provider
      value: #@ data.values.providers.helm.name
    - name: database
      fromFieldPath: spec.forProvider.values.global.postgresql.auth.database
      type: FromFieldPath
    - name: username
      fromFieldPath: spec.forProvider.values.global.postgresql.auth.username
      type: FromFieldPath
    - name: host
      fromFieldPath: metadata.labels.address
      type: FromFieldPath
    - name: port
      value: "5432"
  
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.version
      toFieldPath: 'values."image.tag"'
      transforms:
      - type: map
        map:
          "11": "11.18.0"
          "12": "12.13.0"
          "13": "13.9.0"
          "14": "14.6.0"
          "15": "15.1.0"
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.uid
      toFieldPath: spec.forProvider.values.global.postgresql.auth.existingSecret
      transforms:
        - type: string
          string:
            type: Format
            fmt: '%s-postgresql-admin'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.adminUsername
      toFieldPath: spec.forProvider.values.global.postgresql.auth.username
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.storageClass
      toFieldPath: spec.forProvider.values.primary.persistence.storageClass
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.database
      toFieldPath: spec.forProvider.values.global.postgresql.auth.database
    - type: FromCompositeFieldPath
      fromFieldPath: status.address
      toFieldPath: metadata.labels.address
    - type: CombineToComposite
      toFieldPath: status.address
      policy:
        fromFieldPath: Required
      combine:
        strategy: string
        string:
          fmt: '%s.%s.svc.cluster.local'
        variables:
        - fromFieldPath: metadata.name
        - fromFieldPath: spec.forProvider.namespace
